# Port Proxy

**Port Proxy** 是一个用 Rust 编写的轻量级 TCP 端口转发工具，允许在客户端和服务器之间安全地转发端口，适用于各种网络路由和代理场景。支持加密功能，可以保护客户端和服务器之间传输的数据。

## 功能特性

- **安全端口转发**：客户端和服务器之间的所有流量都使用用户提供的密钥加密，确保数据安全。
- **轻量快速**：基于 Rust 构建，提供高性能、低延迟的代理解决方案。
- **简单配置**：设置简单，几步即可在客户端和服务器之间建立安全的端口转发。

## 使用方法

以下是使用 **Port Proxy** 将本地端口流量转发到远程服务器端口的示例。

### 示例

假设您希望将本地端口 `8080` 的流量转发到服务器的端口 `8000`，服务器的 IP 地址是 `12.12.12.12`。

1. 在**服务器**端运行以下命令：

   ```bash
   port_proxy server -k <encryption_key> -b 0.0.0.0:7000
   ```

   此命令设置了一个监听在 `7000` 端口的服务器，并使用指定的加密密钥。

2. 在**客户端**运行以下命令：

   ```bash
   port_proxy client -k <encryption_key> -c 12.12.12.12:7000 -p 8080:8000
   ```

   这会将本地端口 `8080` 的流量转发到服务器的 `8000` 端口，通过 `7000` 端口的加密连接实现。

配置完成后，通过访问 `localhost:8080` 的流量将会安全地转发到 `12.12.12.12:8000`。

### 从源码构建

如果需要从源码构建并运行该项目，可按照以下步骤操作：

1. 克隆仓库：

   ```bash
   git clone <repository-url>
   cd port_proxy
   ```

2. 运行服务器端：

   ```bash
   cargo run -- server -k <encryption_key> -b 0.0.0.0:7000
   ```

3. 运行客户端：

   ```bash
   cargo run -- client -k <encryption_key> -c 12.12.12.12:7000 -p 8080:8000
   ```

以上命令会构建二进制文件并启动端口转发。

## 安装依赖

- Rust 编译环境（安装教程见 https://www.rust-lang.org/）
- 使用 `cargo build` 进行构建

## 安全提示

- **密钥管理**：请确保加密密钥的安全性，不要将其公开或上传到版本控制系统。
- **防火墙配置**：确保服务器端所监听的端口（如 `7000`）在防火墙中开放。

## 授权协议

此项目基于 MIT 许可证。详细信息请参见 LICENSE 文件。
